		# Join all users to their ratings and the associated food
		CREATE OR REPLACE VIEW userFoodRatings AS 
		SELECT * 
		FROM ratings NATURAL JOIN food_items;
		
		# This should be a list of users who have rated foods the user has rated
		CREATE OR REPLACE VIEW userFoodFriends AS 
		SELECT u1.user_net_id AS user_net_id, u1.rating AS user_rating, u1.food_name AS
			food_name, u2.user_net_id AS friend_net_id, u2.rating AS friend_rating
		FROM userFoodRatings u1 JOIN userFoodRatings u2
	 	WHERE u1.food_name = u2.food_name AND u1.user_net_id != u2.user_net_id;
	 	
	 	# This should get the amount the user differs from friends in ratings for each food
		CREATE OR REPLACE VIEW userFriendRatios AS 
		SELECT user_net_id, friend_net_id, food_name,
			(user_rating - friend_rating) * (user_rating - friend_rating) AS diff
		FROM userFoodFriends
		GROUP BY user_net_id, friend_net_id
		HAVING COUNT(food_name);
		
		# This gets the users with the lowest average difference in ratings
		CREATE OR REPLACE VIEW userBestFriends AS 
		SELECT user_net_id, friend_net_id, AVG(diff) AS variance 
		FROM userFriendRatios
		GROUP BY user_net_id, friend_net_id HAVING variance < 1 ORDER BY variance ASC;
		
		# This gets food best friends like
		CREATE OR REPLACE VIEW bestFriendFood AS
		SELECT u1.user_net_id AS user_net_id, food_name
		FROM userBestFriends u1 JOIN userFoodRatings u2
		WHERE u2.user_net_id = friend_net_id;
		
		# This gets the highest rated foods
		CREATE OR REPLACE VIEW goodFood AS 
		SELECT users.user_net_id AS user_net_id, food_name
	   	FROM users JOIN ratings
	   	GROUP BY food_name 
	   	HAVING AVG(rating) >= 4  
	   	ORDER BY rating DESC;

		# This gets food the user enjoys
		CREATE OR REPLACE VIEW userFood AS
		SELECT user_net_id, food_name
		FROM userFoodRatings
		WHERE rating >= 4;

		# This combines the three food views, giving a score for each food
		# user_net_id, food_name, category_name, COUNT(food_name) AS score
		CREATE OR REPLACE VIEW unionFood AS
		SELECT *
		FROM goodFood
			UNION ALL (SELECT * FROM userFood) 
			UNION ALL (SELECT * FROM bestFriendFood);

		CREATE OR REPLACE VIEW recommendedFood As
		SELECT user_net_id, food_name, category_name, COUNT(food_name) AS score
		FROM unionFood NATURAL JOIN food_items
		GROUP BY user_net_id, food_name
		ORDER BY score DESC;

		# Now that we have a score for each view, we have to make a few
		# views to create rows of recommendations (appetizer, entree, desert)
		
		CREATE OR REPLACE VIEW recommendedSide AS
		SELECT food_name AS side_name, user_net_id, score AS side_score
		FROM recommendedFood
		WHERE category_name = "Appetizers & Sides" 
			OR category_name = "Vegetables"
			OR category_name = "Soups"
			OR category_name = "Breads"
			OR category_name = "Cheeses"
			OR category_name = "Salads"
			OR category_name = "Starches"
			OR category_name = "Whole Fruits"
		ORDER BY score DESC;

		CREATE OR REPLACE VIEW recommendedEntree AS
		SELECT food_name AS entree_name, user_net_id, score AS entree_score
		FROM recommendedFood
		WHERE category_name = "Entrees"
		ORDER BY score DESC;
		
		CREATE OR REPLACE VIEW recommendedDessert AS
		SELECT food_name AS dessert_name, user_net_id, score AS dessert_score
		FROM recommendedFood
		WHERE category_name = "Desserts"
		ORDER BY score DESC;

		# Finally, we must combine these views together to form rows
		# of recommendations
		CREATE OR REPLACE VIEW recommendations AS
		SELECT user_net_id, side_name, entree_name, dessert_name,
			(side_score + entree_score + dessert_score) AS score
		FROM recommendedSide NATURAL JOIN recommendedEntree
			NATURAL JOIN recommendedDessert
		ORDER BY score DESC;